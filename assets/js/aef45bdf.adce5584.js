"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5268],{2087:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"concepts/yaml-configuration","title":"YAML Configuration","description":"Astonish uses YAML files to define agentic flows. This document provides a comprehensive reference for the YAML configuration format, including all available fields, their meanings, and examples.","source":"@site/docs/concepts/yaml-configuration.md","sourceDirName":"concepts","slug":"/concepts/yaml-configuration","permalink":"/astonish/docs/concepts/yaml-configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/schardosin/astonish/tree/main/docs/docs/concepts/yaml-configuration.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Tools","permalink":"/astonish/docs/concepts/tools"},"next":{"title":"Creating Agents","permalink":"/astonish/docs/tutorials/creating-agents"}}');var s=o(4848),i=o(8453);const l={sidebar_position:4},r="YAML Configuration",d={},a=[{value:"Overview",id:"overview",level:2},{value:"Top-Level Fields",id:"top-level-fields",level:2},{value:"<code>description</code>",id:"description",level:3},{value:"<code>nodes</code>",id:"nodes",level:3},{value:"<code>flow</code>",id:"flow",level:3},{value:"Node Configuration",id:"node-configuration",level:2},{value:"Common Fields",id:"common-fields",level:3},{value:"<code>name</code>",id:"name",level:4},{value:"<code>type</code>",id:"type",level:4},{value:"<code>prompt</code>",id:"prompt",level:4},{value:"<code>output_model</code>",id:"output_model",level:4},{value:"<code>user_message</code>",id:"user_message",level:4},{value:"Input Node Fields",id:"input-node-fields",level:3},{value:"<code>options</code>",id:"options",level:4},{value:"LLM Node Fields",id:"llm-node-fields",level:3},{value:"<code>system</code>",id:"system",level:4},{value:"<code>tools</code>",id:"tools",level:4},{value:"<code>tools_selection</code>",id:"tools_selection",level:4},{value:"<code>tools_auto_approval</code>",id:"tools_auto_approval",level:4},{value:"<code>raw_tool_output</code>",id:"raw_tool_output",level:4},{value:"<code>print_state</code>",id:"print_state",level:4},{value:"<code>print_prompt</code>",id:"print_prompt",level:4},{value:"<code>limit</code>",id:"limit",level:4},{value:"<code>limit_counter_field</code>",id:"limit_counter_field",level:4},{value:"Tool Node Fields",id:"tool-node-fields",level:3},{value:"<code>args</code>",id:"args",level:4},{value:"<code>tools_selection</code>",id:"tools_selection-1",level:4},{value:"Flow Configuration",id:"flow-configuration",level:2},{value:"Basic Connections",id:"basic-connections",level:3},{value:"Special Nodes",id:"special-nodes",level:3},{value:"Conditional Edges",id:"conditional-edges",level:3},{value:"Variable Interpolation",id:"variable-interpolation",level:2},{value:"Complete Example",id:"complete-example",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Validation",id:"validation",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"yaml-configuration",children:"YAML Configuration"})}),"\n",(0,s.jsx)(n.p,{children:"Astonish uses YAML files to define agentic flows. This document provides a comprehensive reference for the YAML configuration format, including all available fields, their meanings, and examples."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"An Astonish agent is defined by a YAML file with the following structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"description: A brief description of what the agent does\nnodes:\n  - name: node1\n    type: input\n    # ... node configuration ...\n  - name: node2\n    type: llm\n    # ... node configuration ...\n  # ... more nodes ...\nflow:\n  - from: START\n    to: node1\n  - from: node1\n    to: node2\n  # ... more flow connections ...\n  - from: nodeN\n    to: END\n"})}),"\n",(0,s.jsx)(n.h2,{id:"top-level-fields",children:"Top-Level Fields"}),"\n",(0,s.jsx)(n.h3,{id:"description",children:(0,s.jsx)(n.code,{children:"description"})}),"\n",(0,s.jsx)(n.p,{children:"A string that describes the purpose and functionality of the agent."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"description: An agent that searches the web for information and summarizes the results\n"})}),"\n",(0,s.jsx)(n.h3,{id:"nodes",children:(0,s.jsx)(n.code,{children:"nodes"})}),"\n",(0,s.jsx)(n.p,{children:"An array of node objects that define the steps in the workflow. Each node represents a specific action or decision point in the agent's execution."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"nodes:\n  - name: get_query\n    type: input\n    # ... node configuration ...\n  - name: search_web\n    type: llm\n    # ... node configuration ...\n"})}),"\n",(0,s.jsx)(n.h3,{id:"flow",children:(0,s.jsx)(n.code,{children:"flow"})}),"\n",(0,s.jsxs)(n.p,{children:["An array of connection objects that define how nodes are connected. Each connection specifies a source node (",(0,s.jsx)(n.code,{children:"from"}),") and a destination node (",(0,s.jsx)(n.code,{children:"to"}),"), optionally with conditions for branching paths."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"flow:\n  - from: START\n    to: get_query\n  - from: get_query\n    to: search_web\n  - from: search_web\n    to: END\n"})}),"\n",(0,s.jsx)(n.h2,{id:"node-configuration",children:"Node Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"common-fields",children:"Common Fields"}),"\n",(0,s.jsx)(n.p,{children:"These fields are available for all node types:"}),"\n",(0,s.jsx)(n.h4,{id:"name",children:(0,s.jsx)(n.code,{children:"name"})}),"\n",(0,s.jsx)(n.p,{children:"A unique identifier for the node. This is used to reference the node in the flow."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"name: get_user_query\n"})}),"\n",(0,s.jsx)(n.h4,{id:"type",children:(0,s.jsx)(n.code,{children:"type"})}),"\n",(0,s.jsxs)(n.p,{children:["The type of the node. Must be one of ",(0,s.jsx)(n.code,{children:'"input"'}),", ",(0,s.jsx)(n.code,{children:'"llm"'}),", or ",(0,s.jsx)(n.code,{children:'"tool"'}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"type: input\n"})}),"\n",(0,s.jsx)(n.h4,{id:"prompt",children:(0,s.jsx)(n.code,{children:"prompt"})}),"\n",(0,s.jsx)(n.p,{children:"The text to display to the user (for input nodes) or send to the AI model (for LLM nodes). Can include variables from the state using curly braces."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"prompt: |\n  What would you like to search for?\n"})}),"\n",(0,s.jsx)(n.h4,{id:"output_model",children:(0,s.jsx)(n.code,{children:"output_model"})}),"\n",(0,s.jsx)(n.p,{children:"Defines the variable names and types for the node's output. The variables will be added to the state and can be used by other nodes."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"output_model:\n  search_query: str\n  results_count: int\n"})}),"\n",(0,s.jsx)(n.h4,{id:"user_message",children:(0,s.jsx)(n.code,{children:"user_message"})}),"\n",(0,s.jsx)(n.p,{children:"An array of variable names to display to the user after the node is processed. The variables must be defined in the output_model."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"user_message:\n  - search_results\n"})}),"\n",(0,s.jsx)(n.h3,{id:"input-node-fields",children:"Input Node Fields"}),"\n",(0,s.jsx)(n.h4,{id:"options",children:(0,s.jsx)(n.code,{children:"options"})}),"\n",(0,s.jsx)(n.p,{children:"An array of predefined options for the user to choose from. If provided, the user will be presented with a selection menu instead of a free-form input field."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'options:\n  - "Option 1"\n  - "Option 2"\n  - "Option 3"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"llm-node-fields",children:"LLM Node Fields"}),"\n",(0,s.jsx)(n.h4,{id:"system",children:(0,s.jsx)(n.code,{children:"system"})}),"\n",(0,s.jsx)(n.p,{children:"The system message to send to the AI model. This is used to set the context and behavior of the AI."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"system: |\n  You are a helpful assistant that provides concise and accurate information.\n"})}),"\n",(0,s.jsx)(n.h4,{id:"tools",children:(0,s.jsx)(n.code,{children:"tools"})}),"\n",(0,s.jsxs)(n.p,{children:["A boolean indicating whether the node can use tools. If ",(0,s.jsx)(n.code,{children:"true"}),", the node will be able to use tools specified in ",(0,s.jsx)(n.code,{children:"tools_selection"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"tools: true\n"})}),"\n",(0,s.jsx)(n.h4,{id:"tools_selection",children:(0,s.jsx)(n.code,{children:"tools_selection"})}),"\n",(0,s.jsx)(n.p,{children:"An array of tool names that the node can use. The tools must be available in the system."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"tools_selection:\n  - read_file\n  - web_search\n"})}),"\n",(0,s.jsx)(n.h4,{id:"tools_auto_approval",children:(0,s.jsx)(n.code,{children:"tools_auto_approval"})}),"\n",(0,s.jsxs)(n.p,{children:["A boolean indicating whether tool usage requires user approval. If ",(0,s.jsx)(n.code,{children:"false"}),", the user will be prompted to approve each tool usage."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"tools_auto_approval: false\n"})}),"\n",(0,s.jsx)(n.h4,{id:"raw_tool_output",children:(0,s.jsx)(n.code,{children:"raw_tool_output"})}),"\n",(0,s.jsx)(n.p,{children:"An object mapping state variable names to types for storing raw tool output directly in the state. This is useful for large or complex tool outputs that you don't want the LLM to process."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"raw_tool_output:\n  pr_diff: str\n"})}),"\n",(0,s.jsx)(n.h4,{id:"print_state",children:(0,s.jsx)(n.code,{children:"print_state"})}),"\n",(0,s.jsx)(n.p,{children:"A boolean indicating whether to print the state after the node is processed. Useful for debugging."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"print_state: true\n"})}),"\n",(0,s.jsx)(n.h4,{id:"print_prompt",children:(0,s.jsx)(n.code,{children:"print_prompt"})}),"\n",(0,s.jsx)(n.p,{children:"A boolean indicating whether to print the prompt sent to the AI model. Useful for debugging."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"print_prompt: true\n"})}),"\n",(0,s.jsx)(n.h4,{id:"limit",children:(0,s.jsx)(n.code,{children:"limit"})}),"\n",(0,s.jsxs)(n.p,{children:["An integer specifying the maximum number of times the node can be executed in a loop. Used in conjunction with ",(0,s.jsx)(n.code,{children:"limit_counter_field"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"limit: 5\n"})}),"\n",(0,s.jsx)(n.h4,{id:"limit_counter_field",children:(0,s.jsx)(n.code,{children:"limit_counter_field"})}),"\n",(0,s.jsx)(n.p,{children:"The variable name for the loop counter. The counter is incremented each time the node is executed and reset when it reaches the limit."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"limit_counter_field: iteration_count\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tool-node-fields",children:"Tool Node Fields"}),"\n",(0,s.jsx)(n.h4,{id:"args",children:(0,s.jsx)(n.code,{children:"args"})}),"\n",(0,s.jsx)(n.p,{children:"An object mapping argument names to values for the tool. Values can be literals or references to state variables using curly braces."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'args:\n  file_path: "/path/to/file.txt"\n  content: {generated_content}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"tools_selection-1",children:(0,s.jsx)(n.code,{children:"tools_selection"})}),"\n",(0,s.jsx)(n.p,{children:"An array of tool names that the node can use. The first tool in the list will be executed."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"tools_selection:\n  - chunk_pr_diff\n"})}),"\n",(0,s.jsx)(n.h2,{id:"flow-configuration",children:"Flow Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"basic-connections",children:"Basic Connections"}),"\n",(0,s.jsx)(n.p,{children:"The simplest form of connection is a direct link from one node to another:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"flow:\n  - from: node1\n    to: node2\n"})}),"\n",(0,s.jsx)(n.h3,{id:"special-nodes",children:"Special Nodes"}),"\n",(0,s.jsx)(n.p,{children:"There are two special nodes in the flow:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"START"}),": The entry point of the flow"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"END"}),": The exit point of the flow"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"flow:\n  - from: START\n    to: first_node\n  - from: last_node\n    to: END\n"})}),"\n",(0,s.jsx)(n.h3,{id:"conditional-edges",children:"Conditional Edges"}),"\n",(0,s.jsx)(n.p,{children:"For branching paths, you can use conditional edges with lambda functions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"flow:\n  - from: check_condition\n    edges:\n      - to: path_a\n        condition: \"lambda x: x['condition'] == True\"\n      - to: path_b\n        condition: \"lambda x: x['condition'] == False\"\n"})}),"\n",(0,s.jsx)(n.p,{children:"The lambda function takes the state dictionary as input and returns a boolean indicating whether the edge should be followed."}),"\n",(0,s.jsx)(n.h2,{id:"variable-interpolation",children:"Variable Interpolation"}),"\n",(0,s.jsx)(n.p,{children:"You can include variables from the state in prompts using curly braces:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"prompt: |\n  Generate a response to the user's query: {search_query}\n  \n  Previous results:\n  {previous_results}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,s.jsx)(n.p,{children:"Here's a complete example of an agent that reviews a pull request using both LLM and Tool nodes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"description: PR Review Agentic Flow\nnodes:\n  - name: list_prs\n    type: llm\n    system: |\n      You are a GitHub CLI expert. Your task is to list all open pull requests in the current repository.\n    prompt: |\n      Use the 'gh pr list' command to list all open pull requests.\n\n      Format the output as:\n      123: Title of PR 1\n      456: Title of PR 2\n      789: Title of PR 3\n    output_model:\n      pr_list: list\n    tools: true\n    tools_selection:\n      - shell_command\n\n  - name: select_pr\n    type: input\n    prompt: |\n      Please select a pull request from the list below by entering its number:\n      {pr_list}\n    output_model:\n      selected_pr: str\n    options: [pr_list]\n\n  - name: get_pr_diff\n    type: llm\n    system: |\n      You are a GitHub CLI expert. Your task is to use the 'gh' command to retrieve the diff for a specific pull request.\n    prompt: |\n      Use the 'gh pr diff' command to get the diff for PR number {selected_pr}.\n      IMPORTANT: The tool will return the raw diff. Your final task for this step is to confirm its retrieval.\n    output_model:\n      retrieval_status: str\n    tools: true\n    tools_selection:\n      - shell_command\n    raw_tool_output:\n      pr_diff: str\n\n  - name: chunk_pr\n    type: tool\n    args:\n      diff_content: {pr_diff}\n    tools_selection:\n      - chunk_pr_diff\n    output_model:\n      pr_chunks: list\n      current_index: int\n\n  - name: review_chunk\n    type: llm\n    system: |\n      You are a code review assistant. Your task is to review a chunk of code and provide feedback.\n    prompt: |\n      Review the following chunk of code:\n      {pr_chunks[current_index]}\n      Provide your feedback on this chunk.\n    output_model:\n      chunk_review: str\n\n  - name: collect_reviews\n    type: llm\n    prompt: |\n      collected_reviews:\n      {collected_reviews}\n\n      Append the following review to the collected reviews:\n      {chunk_review}\n    output_model:\n      collected_reviews: list\n\n  - name: increment_index\n    type: llm\n    prompt: |\n      Increment current_index: {current_index}. Output current_index + 1.\n    output_model:\n      current_index: int\n\n  - name: show_reviews\n    type: llm\n    system: |\n      You are a summarization assistant. Your task is to present the collected reviews to the user.\n    prompt: |\n      Here are the reviews for the pull request:\n      {collected_reviews}\n    output_model:\n      final_summary: str\n    user_message:\n      - final_summary\n\nflow:\n  - from: START\n    to: list_prs\n  - from: list_prs\n    to: select_pr\n  - from: select_pr\n    to: get_pr_diff\n  - from: get_pr_diff\n    to: chunk_pr\n  - from: chunk_pr\n    to: review_chunk\n  - from: review_chunk\n    to: collect_reviews\n  - from: collect_reviews\n    to: increment_index\n  - from: increment_index\n    edges:\n      - to: review_chunk\n        condition: \"lambda x: x['current_index'] < len(x['pr_chunks'])\"\n      - to: show_reviews\n        condition: \"lambda x: not x['current_index'] < len(x['pr_chunks'])\"\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use descriptive names"}),": Give nodes clear, descriptive names that indicate their purpose"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Keep prompts focused"}),": Each node should have a specific purpose and a focused prompt"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use system messages"}),": Set appropriate system messages for LLM nodes to guide the AI's behavior"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validate user input"}),": Use input nodes with options to restrict user input to valid choices"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Handle errors"}),": Use conditional edges to handle potential errors in the flow"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use tools judiciously"}),": Only enable tools that are necessary for the node's function"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Document your YAML"}),": Add comments to explain complex parts of the configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test thoroughly"}),": Test your agent with various inputs to ensure it behaves as expected"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"validation",children:"Validation"}),"\n",(0,s.jsxs)(n.p,{children:["Astonish validates YAML configurations against a schema to ensure they are well-formed. You can use the ",(0,s.jsx)(n.code,{children:"validate_yaml_with_schema"})," tool to validate your configurations:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"- name: validate_config\n  type: llm\n  prompt: |\n    Validate the following YAML configuration against the schema:\n    \n    Configuration:\n    {yaml_content}\n    \n    Schema:\n    {yaml_schema}\n  output_model:\n    validation_result: str\n  tools: true\n  tools_selection:\n    - validate_yaml_with_schema\n"})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"To learn more about YAML configuration in Astonish, check out:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/concepts/agentic-flows",children:"Agentic Flows"})," for an overview of how nodes are connected"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/concepts/nodes",children:"Nodes"})," for details on node types and configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/concepts/tools",children:"Tools"})," for information on using tools in your agents"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/tutorials/creating-agents",children:"Tutorials"})," for examples of creating agents"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>r});var t=o(6540);const s={},i=t.createContext(s);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);