"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4731],{7357:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"concepts/nodes","title":"Nodes","description":"Nodes are the fundamental building blocks of agentic flows in Astonish. Each node represents a specific step in the workflow and performs a particular function, such as getting user input, processing information with an AI model, or using tools to interact with external systems.","source":"@site/docs/concepts/nodes.md","sourceDirName":"concepts","slug":"/concepts/nodes","permalink":"/astonish/docs/concepts/nodes","draft":false,"unlisted":false,"editUrl":"https://github.com/schardosin/astonish/tree/main/docs/docs/concepts/nodes.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Agentic Flows","permalink":"/astonish/docs/concepts/agentic-flows"},"next":{"title":"Tools","permalink":"/astonish/docs/concepts/tools"}}');var o=s(4848),i=s(8453);const l={sidebar_position:2},r="Nodes",d={},c=[{value:"Node Types",id:"node-types",level:2},{value:"Input Nodes",id:"input-nodes",level:3},{value:"Configuration",id:"configuration",level:4},{value:"Example",id:"example",level:4},{value:"LLM Nodes",id:"llm-nodes",level:3},{value:"Raw Tool Output",id:"raw-tool-output",level:4},{value:"Tool Nodes",id:"tool-nodes",level:3},{value:"Configuration",id:"configuration-1",level:4},{value:"Example",id:"example-1",level:4},{value:"Configuration",id:"configuration-2",level:4},{value:"Example",id:"example-2",level:4},{value:"Node Fields",id:"node-fields",level:2},{value:"Common Fields",id:"common-fields",level:3},{value:"<code>name</code>",id:"name",level:4},{value:"<code>type</code>",id:"type",level:4},{value:"<code>prompt</code>",id:"prompt",level:4},{value:"<code>output_model</code>",id:"output_model",level:4},{value:"<code>user_message</code>",id:"user_message",level:4},{value:"Input Node Specific Fields",id:"input-node-specific-fields",level:3},{value:"<code>options</code>",id:"options",level:4},{value:"LLM Node Specific Fields",id:"llm-node-specific-fields",level:3},{value:"<code>system</code>",id:"system",level:4},{value:"<code>tools</code>",id:"tools",level:4},{value:"<code>tools_selection</code>",id:"tools_selection",level:4},{value:"<code>tools_auto_approval</code>",id:"tools_auto_approval",level:4},{value:"<code>raw_tool_output</code>",id:"raw_tool_output",level:4},{value:"<code>print_state</code>",id:"print_state",level:4},{value:"<code>print_prompt</code>",id:"print_prompt",level:4},{value:"<code>limit</code>",id:"limit",level:4},{value:"<code>limit_counter_field</code>",id:"limit_counter_field",level:4},{value:"Tool Node Specific Fields",id:"tool-node-specific-fields",level:3},{value:"<code>args</code>",id:"args",level:4},{value:"<code>tools_selection</code>",id:"tools_selection-1",level:4},{value:"Variable Interpolation",id:"variable-interpolation",level:2},{value:"Node Execution Flow",id:"node-execution-flow",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"nodes",children:"Nodes"})}),"\n",(0,o.jsx)(n.p,{children:"Nodes are the fundamental building blocks of agentic flows in Astonish. Each node represents a specific step in the workflow and performs a particular function, such as getting user input, processing information with an AI model, or using tools to interact with external systems."}),"\n",(0,o.jsx)(n.h2,{id:"node-types",children:"Node Types"}),"\n",(0,o.jsx)(n.p,{children:"Astonish supports three main types of nodes:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Input Nodes"}),": Used to get information from the user"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"LLM Nodes"}),": Used to process information using AI models and tools"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Tool Nodes"}),": Used to directly execute tools without LLM involvement"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"input-nodes",children:"Input Nodes"}),"\n",(0,o.jsx)(n.p,{children:"Input nodes are used to collect information from the user. They display a prompt and store the user's response in the state."}),"\n",(0,o.jsx)(n.h4,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Field"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"name"})}),(0,o.jsx)(n.td,{children:"string"}),(0,o.jsx)(n.td,{children:"A unique identifier for the node"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"type"})}),(0,o.jsx)(n.td,{children:"string"}),(0,o.jsxs)(n.td,{children:["Must be ",(0,o.jsx)(n.code,{children:'"input"'})]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"prompt"})}),(0,o.jsx)(n.td,{children:"string"}),(0,o.jsx)(n.td,{children:"The text to display to the user"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"output_model"})}),(0,o.jsx)(n.td,{children:"object"}),(0,o.jsx)(n.td,{children:"Defines the variable name and type for the user's response"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"options"})}),(0,o.jsx)(n.td,{children:"array (optional)"}),(0,o.jsx)(n.td,{children:"A list of predefined options for the user to choose from"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"user_message"})}),(0,o.jsx)(n.td,{children:"array (optional)"}),(0,o.jsx)(n.td,{children:"Variables to display to the user after processing"})]})]})]}),"\n",(0,o.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'- name: get_topic\n  type: input\n  prompt: |\n    What topic do you want to research?\n  output_model:\n    research_topic: str\n  options:\n    - "Artificial Intelligence"\n    - "Climate Change"\n    - "Quantum Computing"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"llm-nodes",children:"LLM Nodes"}),"\n",(0,o.jsx)(n.p,{children:"LLM (Language Learning Model) nodes use AI models to process information and generate responses. They can also use tools to interact with external systems."}),"\n",(0,o.jsx)(n.h4,{id:"raw-tool-output",children:"Raw Tool Output"}),"\n",(0,o.jsxs)(n.p,{children:["LLM nodes can store the raw output of tools directly in the state using the ",(0,o.jsx)(n.code,{children:"raw_tool_output"})," field. This is useful when the tool output is large or complex and you want to avoid having the LLM process it."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"- name: get_pr_diff\n  type: llm\n  system: |\n    You are a GitHub CLI expert. Your task is to use the 'gh' command to retrieve the diff for a specific pull request.\n  prompt: |\n    Use the 'gh pr diff' command to get the diff for PR number {selected_pr}.\n    IMPORTANT: The tool will return the raw diff. Your final task for this step is to confirm its retrieval.\n  output_model:\n    retrieval_status: str\n  tools: true\n  tools_selection:\n    - shell_command\n  raw_tool_output:\n    pr_diff: str\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In this example, the raw output of the ",(0,o.jsx)(n.code,{children:"shell_command"})," tool is stored directly in the state variable ",(0,o.jsx)(n.code,{children:"pr_diff"}),", while the LLM's response is stored in ",(0,o.jsx)(n.code,{children:"retrieval_status"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"tool-nodes",children:"Tool Nodes"}),"\n",(0,o.jsx)(n.p,{children:"Tool nodes execute tools directly without involving an LLM. This is useful for operations that don't require AI reasoning, such as data processing, file operations, or API calls."}),"\n",(0,o.jsx)(n.h4,{id:"configuration-1",children:"Configuration"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Field"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"name"})}),(0,o.jsx)(n.td,{children:"string"}),(0,o.jsx)(n.td,{children:"A unique identifier for the node"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"type"})}),(0,o.jsx)(n.td,{children:"string"}),(0,o.jsxs)(n.td,{children:["Must be ",(0,o.jsx)(n.code,{children:'"tool"'})]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"args"})}),(0,o.jsx)(n.td,{children:"object"}),(0,o.jsx)(n.td,{children:"Arguments to pass to the tool"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"tools_selection"})}),(0,o.jsx)(n.td,{children:"array"}),(0,o.jsx)(n.td,{children:"List of tools the node can use (first tool in the list is used)"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"output_model"})}),(0,o.jsx)(n.td,{children:"object"}),(0,o.jsx)(n.td,{children:"Defines the variable names and types for the tool's output"})]})]})]}),"\n",(0,o.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"- name: chunk_pr\n  type: tool\n  args:\n    diff_content: {pr_diff}\n  tools_selection:\n    - chunk_pr_diff\n  output_model:\n    pr_chunks: list\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In this example, the ",(0,o.jsx)(n.code,{children:"chunk_pr_diff"})," tool is executed with the ",(0,o.jsx)(n.code,{children:"diff_content"})," argument, and the result is stored in the ",(0,o.jsx)(n.code,{children:"pr_chunks"})," variable."]}),"\n",(0,o.jsx)(n.h4,{id:"configuration-2",children:"Configuration"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Field"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"name"})}),(0,o.jsx)(n.td,{children:"string"}),(0,o.jsx)(n.td,{children:"A unique identifier for the node"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"type"})}),(0,o.jsx)(n.td,{children:"string"}),(0,o.jsxs)(n.td,{children:["Must be ",(0,o.jsx)(n.code,{children:'"llm"'})]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"system"})}),(0,o.jsx)(n.td,{children:"string (optional)"}),(0,o.jsx)(n.td,{children:"System message for the AI model"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"prompt"})}),(0,o.jsx)(n.td,{children:"string"}),(0,o.jsx)(n.td,{children:"The prompt to send to the AI model"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"output_model"})}),(0,o.jsx)(n.td,{children:"object"}),(0,o.jsx)(n.td,{children:"Defines the variable names and types for the AI's response"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"tools"})}),(0,o.jsx)(n.td,{children:"boolean (optional)"}),(0,o.jsx)(n.td,{children:"Whether the node can use tools"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"tools_selection"})}),(0,o.jsx)(n.td,{children:"array (optional)"}),(0,o.jsx)(n.td,{children:"List of tools the node can use"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"tools_auto_approval"})}),(0,o.jsx)(n.td,{children:"boolean (optional)"}),(0,o.jsx)(n.td,{children:"Whether tool usage requires user approval"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"user_message"})}),(0,o.jsx)(n.td,{children:"array (optional)"}),(0,o.jsx)(n.td,{children:"Variables to display to the user after processing"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"print_state"})}),(0,o.jsx)(n.td,{children:"boolean (optional)"}),(0,o.jsx)(n.td,{children:"Whether to print the state after processing"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"print_prompt"})}),(0,o.jsx)(n.td,{children:"boolean (optional)"}),(0,o.jsx)(n.td,{children:"Whether to print the prompt sent to the AI model"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"limit"})}),(0,o.jsx)(n.td,{children:"integer (optional)"}),(0,o.jsx)(n.td,{children:"Maximum number of times the node can be executed in a loop"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"limit_counter_field"})}),(0,o.jsx)(n.td,{children:"string (optional)"}),(0,o.jsx)(n.td,{children:"Variable name for the loop counter"})]})]})]}),"\n",(0,o.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'- name: search_web\n  type: llm\n  system: |\n    You are a research assistant that performs high-quality web searches.\n  prompt: |\n    Please perform a web search to gather useful information on the following topic:\n    \n    Topic: "{research_topic}"\n    \n    Make sure to include credible sources.\n  output_model:\n    search_results: list\n  tools: true\n  tools_selection:\n    - web_search\n  tools_auto_approval: false\n'})}),"\n",(0,o.jsx)(n.h2,{id:"node-fields",children:"Node Fields"}),"\n",(0,o.jsx)(n.h3,{id:"common-fields",children:"Common Fields"}),"\n",(0,o.jsx)(n.h4,{id:"name",children:(0,o.jsx)(n.code,{children:"name"})}),"\n",(0,o.jsx)(n.p,{children:"A unique identifier for the node. This is used to reference the node in the flow."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"name: get_user_input\n"})}),"\n",(0,o.jsx)(n.h4,{id:"type",children:(0,o.jsx)(n.code,{children:"type"})}),"\n",(0,o.jsxs)(n.p,{children:["The type of the node. Must be either ",(0,o.jsx)(n.code,{children:'"input"'})," or ",(0,o.jsx)(n.code,{children:'"llm"'}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"type: input\n"})}),"\n",(0,o.jsx)(n.h4,{id:"prompt",children:(0,o.jsx)(n.code,{children:"prompt"})}),"\n",(0,o.jsx)(n.p,{children:"The text to display to the user (for input nodes) or send to the AI model (for LLM nodes). Can include variables from the state using curly braces."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"prompt: |\n  What would you like to search for?\n"})}),"\n",(0,o.jsx)(n.h4,{id:"output_model",children:(0,o.jsx)(n.code,{children:"output_model"})}),"\n",(0,o.jsx)(n.p,{children:"Defines the variable names and types for the node's output. The variables will be added to the state and can be used by other nodes."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"output_model:\n  search_query: str\n  results_count: int\n"})}),"\n",(0,o.jsx)(n.h4,{id:"user_message",children:(0,o.jsx)(n.code,{children:"user_message"})}),"\n",(0,o.jsx)(n.p,{children:"An array of variable names to display to the user after the node is processed. The variables must be defined in the output_model."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"user_message:\n  - search_results\n"})}),"\n",(0,o.jsx)(n.h3,{id:"input-node-specific-fields",children:"Input Node Specific Fields"}),"\n",(0,o.jsx)(n.h4,{id:"options",children:(0,o.jsx)(n.code,{children:"options"})}),"\n",(0,o.jsx)(n.p,{children:"An array of predefined options for the user to choose from. If provided, the user will be presented with a selection menu instead of a free-form input field."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'options:\n  - "Option 1"\n  - "Option 2"\n  - "Option 3"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"llm-node-specific-fields",children:"LLM Node Specific Fields"}),"\n",(0,o.jsx)(n.h4,{id:"system",children:(0,o.jsx)(n.code,{children:"system"})}),"\n",(0,o.jsx)(n.p,{children:"The system message to send to the AI model. This is used to set the context and behavior of the AI."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"system: |\n  You are a helpful assistant that provides concise and accurate information.\n"})}),"\n",(0,o.jsx)(n.h4,{id:"tools",children:(0,o.jsx)(n.code,{children:"tools"})}),"\n",(0,o.jsxs)(n.p,{children:["A boolean indicating whether the node can use tools. If ",(0,o.jsx)(n.code,{children:"true"}),", the node will be able to use tools specified in ",(0,o.jsx)(n.code,{children:"tools_selection"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"tools: true\n"})}),"\n",(0,o.jsx)(n.h4,{id:"tools_selection",children:(0,o.jsx)(n.code,{children:"tools_selection"})}),"\n",(0,o.jsx)(n.p,{children:"An array of tool names that the node can use. The tools must be available in the system."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"tools_selection:\n  - read_file\n  - web_search\n"})}),"\n",(0,o.jsx)(n.h4,{id:"tools_auto_approval",children:(0,o.jsx)(n.code,{children:"tools_auto_approval"})}),"\n",(0,o.jsxs)(n.p,{children:["A boolean indicating whether tool usage requires user approval. If ",(0,o.jsx)(n.code,{children:"false"}),", the user will be prompted to approve each tool usage."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"tools_auto_approval: false\n"})}),"\n",(0,o.jsx)(n.h4,{id:"raw_tool_output",children:(0,o.jsx)(n.code,{children:"raw_tool_output"})}),"\n",(0,o.jsx)(n.p,{children:"An object mapping state variable names to types for storing raw tool output directly in the state. This is useful for large or complex tool outputs that you don't want the LLM to process."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"raw_tool_output:\n  pr_diff: str\n"})}),"\n",(0,o.jsx)(n.h4,{id:"print_state",children:(0,o.jsx)(n.code,{children:"print_state"})}),"\n",(0,o.jsx)(n.p,{children:"A boolean indicating whether to print the state after the node is processed. Useful for debugging."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"print_state: true\n"})}),"\n",(0,o.jsx)(n.h4,{id:"print_prompt",children:(0,o.jsx)(n.code,{children:"print_prompt"})}),"\n",(0,o.jsx)(n.p,{children:"A boolean indicating whether to print the prompt sent to the AI model. Useful for debugging."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"print_prompt: true\n"})}),"\n",(0,o.jsx)(n.h4,{id:"limit",children:(0,o.jsx)(n.code,{children:"limit"})}),"\n",(0,o.jsxs)(n.p,{children:["An integer specifying the maximum number of times the node can be executed in a loop. Used in conjunction with ",(0,o.jsx)(n.code,{children:"limit_counter_field"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"limit: 5\n"})}),"\n",(0,o.jsx)(n.h4,{id:"limit_counter_field",children:(0,o.jsx)(n.code,{children:"limit_counter_field"})}),"\n",(0,o.jsx)(n.p,{children:"The variable name for the loop counter. The counter is incremented each time the node is executed and reset when it reaches the limit."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"limit_counter_field: iteration_count\n"})}),"\n",(0,o.jsx)(n.h3,{id:"tool-node-specific-fields",children:"Tool Node Specific Fields"}),"\n",(0,o.jsx)(n.h4,{id:"args",children:(0,o.jsx)(n.code,{children:"args"})}),"\n",(0,o.jsx)(n.p,{children:"An object mapping argument names to values for the tool. Values can be literals or references to state variables using curly braces."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'args:\n  file_path: "/path/to/file.txt"\n  content: {generated_content}\n'})}),"\n",(0,o.jsx)(n.h4,{id:"tools_selection-1",children:(0,o.jsx)(n.code,{children:"tools_selection"})}),"\n",(0,o.jsx)(n.p,{children:"An array of tool names that the node can use. The first tool in the list will be executed."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"tools_selection:\n  - chunk_pr_diff\n"})}),"\n",(0,o.jsx)(n.h2,{id:"variable-interpolation",children:"Variable Interpolation"}),"\n",(0,o.jsx)(n.p,{children:"Nodes can access variables from the state using curly braces in the prompt field. This allows for dynamic prompts based on previous nodes' outputs."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"prompt: |\n  Generate a response to the user's query: {search_query}\n  \n  Previous results:\n  {previous_results}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"node-execution-flow",children:"Node Execution Flow"}),"\n",(0,o.jsx)(n.p,{children:"When a node is executed:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"The node's prompt is formatted with variables from the state"}),"\n",(0,o.jsxs)(n.li,{children:["For input nodes:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"The prompt is displayed to the user"}),"\n",(0,o.jsx)(n.li,{children:"The user's response is stored in the state according to the output_model"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["For LLM nodes:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"The prompt is sent to the AI model along with the system message"}),"\n",(0,o.jsx)(n.li,{children:"If tools are enabled, the AI can use the specified tools"}),"\n",(0,o.jsx)(n.li,{children:"The AI's response is parsed according to the output_model and stored in the state"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"If user_message is specified, the corresponding variables are displayed to the user"}),"\n",(0,o.jsx)(n.li,{children:"The flow continues to the next node as defined in the flow section"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Use descriptive names"}),": Give nodes clear, descriptive names that indicate their purpose"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Keep prompts focused"}),": Each node should have a specific purpose and a focused prompt"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Use system messages"}),": Set appropriate system messages for LLM nodes to guide the AI's behavior"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Validate user input"}),": Use input nodes with options to restrict user input to valid choices"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Handle errors"}),": Use conditional edges to handle potential errors in the flow"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Use tools judiciously"}),": Only enable tools that are necessary for the node's function"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Document your nodes"}),": Add comments in the YAML file to explain complex nodes"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsx)(n.p,{children:"To learn more about how nodes fit into the larger agentic flow structure, check out:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/docs/concepts/agentic-flows",children:"Agentic Flows"})," for an overview of how nodes are connected"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/docs/concepts/tools",children:"Tools"})," for details on how to use tools in LLM nodes"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/docs/concepts/yaml-configuration",children:"YAML Configuration"})," for the full specification of node configuration"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>r});var t=s(6540);const o={},i=t.createContext(o);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);