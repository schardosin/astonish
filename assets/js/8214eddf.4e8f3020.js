"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2995],{4589:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"concepts/parameter-passing","title":"Parameter Passing","description":"Astonish supports passing parameters directly to agents, allowing for more automated workflows and non-interactive execution.","source":"@site/docs/concepts/parameter-passing.md","sourceDirName":"concepts","slug":"/concepts/parameter-passing","permalink":"/astonish/docs/concepts/parameter-passing","draft":false,"unlisted":false,"editUrl":"https://github.com/schardosin/astonish/tree/main/docs/docs/concepts/parameter-passing.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5}}');var i=t(4848),o=t(8453);const a={sidebar_position:5},r="Parameter Passing",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Command Line",id:"command-line",level:3},{value:"Using File Content",id:"using-file-content",level:3},{value:"Using Environment Variables",id:"using-environment-variables",level:3},{value:"Parameter Format",id:"parameter-format",level:2},{value:"Behavior",id:"behavior",level:2},{value:"Example",id:"example",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"parameter-passing",children:"Parameter Passing"})}),"\n",(0,i.jsx)(n.p,{children:"Astonish supports passing parameters directly to agents, allowing for more automated workflows and non-interactive execution."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Parameter passing enables you to pre-populate input fields that would normally require user interaction. This is particularly useful for:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Automating agent execution in scripts"}),"\n",(0,i.jsx)(n.li,{children:"Integrating agents into larger workflows"}),"\n",(0,i.jsx)(n.li,{children:"Running agents with predefined inputs"}),"\n",(0,i.jsx)(n.li,{children:"Using file content or environment variables as inputs"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.h3,{id:"command-line",children:"Command Line"}),"\n",(0,i.jsxs)(n.p,{children:["You can pass parameters to an agent using the ",(0,i.jsx)(n.code,{children:"-p"})," or ",(0,i.jsx)(n.code,{children:"--param"})," flag with key=value format. You can use multiple flags for multiple parameters:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'astonish agents run simple_question_answer_loop -p get_question="Who was Albert Einstein" -p continue_loop=no\n'})}),"\n",(0,i.jsx)(n.h3,{id:"using-file-content",children:"Using File Content"}),"\n",(0,i.jsx)(n.p,{children:"You can use shell expansion to read file content as a parameter value:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'astonish agents run simple_question_answer_loop -p get_question="$(<question.txt)" -p continue_loop=no\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This reads the content of ",(0,i.jsx)(n.code,{children:"question.txt"})," and passes it as the value for the ",(0,i.jsx)(n.code,{children:"get_question"})," parameter."]}),"\n",(0,i.jsx)(n.h3,{id:"using-environment-variables",children:"Using Environment Variables"}),"\n",(0,i.jsx)(n.p,{children:"You can use environment variables as parameter values:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Set an environment variable\nexport QUESTION="Who was Albert Einstein"\n\n# Use it in the command\nastonish agents run simple_question_answer_loop -p get_question="$QUESTION" -p continue_loop=no\n'})}),"\n",(0,i.jsx)(n.h2,{id:"parameter-format",children:"Parameter Format"}),"\n",(0,i.jsx)(n.p,{children:"Parameters are specified in key=value format where:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Keys are the ",(0,i.jsx)(n.strong,{children:"node names"})," defined in the agent's YAML file"]}),"\n",(0,i.jsx)(n.li,{children:"Values are the values you want to assign to those nodes' output fields"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For example, if your agent has an input node with:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'- name: get_topic\n  type: input\n  prompt: "What topic would you like to write about?"\n  output_model:\n    user_request: str\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can pass a parameter with the key ",(0,i.jsx)(n.code,{children:"get_topic"})," to pre-populate this node's output:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'-p get_topic="Artificial Intelligence"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,i.jsx)(n.p,{children:"When a parameter is provided for an input node:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The node will check if there's a parameter with its name in the parameters dictionary"}),"\n",(0,i.jsx)(n.li,{children:"If there is, it will use that value instead of prompting the user"}),"\n",(0,i.jsx)(n.li,{children:"The prompt will still be displayed to show what question would have been asked"}),"\n",(0,i.jsx)(n.li,{children:"The agent will continue execution as if the user had provided the input"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"If a parameter is not provided for an input node, the agent will prompt the user for input as usual."}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"Consider this simple agent:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'description: Simple Agent to Respond to User Questions in a Loop\nnodes:\n- name: get_question\n  type: input\n  prompt: |\n    What is your question?\n  output_model:\n    question: str\n- name: answer_question\n  type: llm\n  system: |\n    You are a helpful assistant.\n  prompt: |\n    Answer the following question: "{question}"\n  output_model:\n    answer: str\n  user_message:\n    - answer\n- name: continue_loop\n  type: input\n  prompt: |\n    Do you want to continue asking questions?\n  output_model:\n    continue: str\n  options:\n    - "yes"\n    - "no"\nflow:\n- from: START\n  to: get_question\n- from: get_question\n  to: answer_question\n- from: answer_question\n  to: continue_loop\n- from: continue_loop\n  edges:\n  - to: get_question\n    condition: "lambda x: x[\'continue\'] == \'yes\'"\n  - to: END\n    condition: "lambda x: x[\'continue\'] == \'no\'"\n'})}),"\n",(0,i.jsx)(n.p,{children:"You would call it like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'astonish agents run simple_question_answer_loop -p get_question="Who was Albert Einstein" -p continue_loop=no\n'})}),"\n",(0,i.jsxs)(n.p,{children:['This would run the agent with the question "Who was Albert Einstein" and automatically exit after one answer (since ',(0,i.jsx)(n.code,{children:"continue_loop"}),' is set to "no").']})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(6540);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);