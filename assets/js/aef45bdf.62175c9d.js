"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5268],{2087:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"concepts/yaml-configuration","title":"YAML Configuration","description":"Astonish uses YAML files to define agentic flows. This document provides a comprehensive reference for the YAML configuration format, including all available fields, their meanings, and examples.","source":"@site/docs/concepts/yaml-configuration.md","sourceDirName":"concepts","slug":"/concepts/yaml-configuration","permalink":"/astonish/docs/concepts/yaml-configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/schardosin/astonish/tree/main/docs/docs/concepts/yaml-configuration.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Tools","permalink":"/astonish/docs/concepts/tools"},"next":{"title":"Creating Agents","permalink":"/astonish/docs/tutorials/creating-agents"}}');var i=o(4848),t=o(8453);const l={sidebar_position:4},r="YAML Configuration",a={},d=[{value:"Overview",id:"overview",level:2},{value:"Top-Level Fields",id:"top-level-fields",level:2},{value:"<code>description</code>",id:"description",level:3},{value:"<code>nodes</code>",id:"nodes",level:3},{value:"<code>flow</code>",id:"flow",level:3},{value:"Node Configuration",id:"node-configuration",level:2},{value:"Common Fields",id:"common-fields",level:3},{value:"<code>name</code>",id:"name",level:4},{value:"<code>type</code>",id:"type",level:4},{value:"<code>prompt</code>",id:"prompt",level:4},{value:"<code>output_model</code>",id:"output_model",level:4},{value:"<code>user_message</code>",id:"user_message",level:4},{value:"Input Node Fields",id:"input-node-fields",level:3},{value:"<code>options</code>",id:"options",level:4},{value:"LLM Node Fields",id:"llm-node-fields",level:3},{value:"<code>system</code>",id:"system",level:4},{value:"<code>tools</code>",id:"tools",level:4},{value:"<code>tools_selection</code>",id:"tools_selection",level:4},{value:"<code>tools_auto_approval</code>",id:"tools_auto_approval",level:4},{value:"<code>print_state</code>",id:"print_state",level:4},{value:"<code>print_prompt</code>",id:"print_prompt",level:4},{value:"<code>limit</code>",id:"limit",level:4},{value:"<code>limit_counter_field</code>",id:"limit_counter_field",level:4},{value:"Flow Configuration",id:"flow-configuration",level:2},{value:"Basic Connections",id:"basic-connections",level:3},{value:"Special Nodes",id:"special-nodes",level:3},{value:"Conditional Edges",id:"conditional-edges",level:3},{value:"Variable Interpolation",id:"variable-interpolation",level:2},{value:"Complete Example",id:"complete-example",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Validation",id:"validation",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"yaml-configuration",children:"YAML Configuration"})}),"\n",(0,i.jsx)(n.p,{children:"Astonish uses YAML files to define agentic flows. This document provides a comprehensive reference for the YAML configuration format, including all available fields, their meanings, and examples."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"An Astonish agent is defined by a YAML file with the following structure:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"description: A brief description of what the agent does\nnodes:\n  - name: node1\n    type: input\n    # ... node configuration ...\n  - name: node2\n    type: llm\n    # ... node configuration ...\n  # ... more nodes ...\nflow:\n  - from: START\n    to: node1\n  - from: node1\n    to: node2\n  # ... more flow connections ...\n  - from: nodeN\n    to: END\n"})}),"\n",(0,i.jsx)(n.h2,{id:"top-level-fields",children:"Top-Level Fields"}),"\n",(0,i.jsx)(n.h3,{id:"description",children:(0,i.jsx)(n.code,{children:"description"})}),"\n",(0,i.jsx)(n.p,{children:"A string that describes the purpose and functionality of the agent."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"description: An agent that searches the web for information and summarizes the results\n"})}),"\n",(0,i.jsx)(n.h3,{id:"nodes",children:(0,i.jsx)(n.code,{children:"nodes"})}),"\n",(0,i.jsx)(n.p,{children:"An array of node objects that define the steps in the workflow. Each node represents a specific action or decision point in the agent's execution."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"nodes:\n  - name: get_query\n    type: input\n    # ... node configuration ...\n  - name: search_web\n    type: llm\n    # ... node configuration ...\n"})}),"\n",(0,i.jsx)(n.h3,{id:"flow",children:(0,i.jsx)(n.code,{children:"flow"})}),"\n",(0,i.jsxs)(n.p,{children:["An array of connection objects that define how nodes are connected. Each connection specifies a source node (",(0,i.jsx)(n.code,{children:"from"}),") and a destination node (",(0,i.jsx)(n.code,{children:"to"}),"), optionally with conditions for branching paths."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"flow:\n  - from: START\n    to: get_query\n  - from: get_query\n    to: search_web\n  - from: search_web\n    to: END\n"})}),"\n",(0,i.jsx)(n.h2,{id:"node-configuration",children:"Node Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"common-fields",children:"Common Fields"}),"\n",(0,i.jsx)(n.p,{children:"These fields are available for all node types:"}),"\n",(0,i.jsx)(n.h4,{id:"name",children:(0,i.jsx)(n.code,{children:"name"})}),"\n",(0,i.jsx)(n.p,{children:"A unique identifier for the node. This is used to reference the node in the flow."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"name: get_user_query\n"})}),"\n",(0,i.jsx)(n.h4,{id:"type",children:(0,i.jsx)(n.code,{children:"type"})}),"\n",(0,i.jsxs)(n.p,{children:["The type of the node. Must be either ",(0,i.jsx)(n.code,{children:'"input"'})," or ",(0,i.jsx)(n.code,{children:'"llm"'}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"type: input\n"})}),"\n",(0,i.jsx)(n.h4,{id:"prompt",children:(0,i.jsx)(n.code,{children:"prompt"})}),"\n",(0,i.jsx)(n.p,{children:"The text to display to the user (for input nodes) or send to the AI model (for LLM nodes). Can include variables from the state using curly braces."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"prompt: |\n  What would you like to search for?\n"})}),"\n",(0,i.jsx)(n.h4,{id:"output_model",children:(0,i.jsx)(n.code,{children:"output_model"})}),"\n",(0,i.jsx)(n.p,{children:"Defines the variable names and types for the node's output. The variables will be added to the state and can be used by other nodes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"output_model:\n  search_query: str\n  results_count: int\n"})}),"\n",(0,i.jsx)(n.h4,{id:"user_message",children:(0,i.jsx)(n.code,{children:"user_message"})}),"\n",(0,i.jsx)(n.p,{children:"An array of variable names to display to the user after the node is processed. The variables must be defined in the output_model."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"user_message:\n  - search_results\n"})}),"\n",(0,i.jsx)(n.h3,{id:"input-node-fields",children:"Input Node Fields"}),"\n",(0,i.jsx)(n.h4,{id:"options",children:(0,i.jsx)(n.code,{children:"options"})}),"\n",(0,i.jsx)(n.p,{children:"An array of predefined options for the user to choose from. If provided, the user will be presented with a selection menu instead of a free-form input field."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'options:\n  - "Option 1"\n  - "Option 2"\n  - "Option 3"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"llm-node-fields",children:"LLM Node Fields"}),"\n",(0,i.jsx)(n.h4,{id:"system",children:(0,i.jsx)(n.code,{children:"system"})}),"\n",(0,i.jsx)(n.p,{children:"The system message to send to the AI model. This is used to set the context and behavior of the AI."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"system: |\n  You are a helpful assistant that provides concise and accurate information.\n"})}),"\n",(0,i.jsx)(n.h4,{id:"tools",children:(0,i.jsx)(n.code,{children:"tools"})}),"\n",(0,i.jsxs)(n.p,{children:["A boolean indicating whether the node can use tools. If ",(0,i.jsx)(n.code,{children:"true"}),", the node will be able to use tools specified in ",(0,i.jsx)(n.code,{children:"tools_selection"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"tools: true\n"})}),"\n",(0,i.jsx)(n.h4,{id:"tools_selection",children:(0,i.jsx)(n.code,{children:"tools_selection"})}),"\n",(0,i.jsx)(n.p,{children:"An array of tool names that the node can use. The tools must be available in the system."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"tools_selection:\n  - read_file\n  - web_search\n"})}),"\n",(0,i.jsx)(n.h4,{id:"tools_auto_approval",children:(0,i.jsx)(n.code,{children:"tools_auto_approval"})}),"\n",(0,i.jsxs)(n.p,{children:["A boolean indicating whether tool usage requires user approval. If ",(0,i.jsx)(n.code,{children:"false"}),", the user will be prompted to approve each tool usage."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"tools_auto_approval: false\n"})}),"\n",(0,i.jsx)(n.h4,{id:"print_state",children:(0,i.jsx)(n.code,{children:"print_state"})}),"\n",(0,i.jsx)(n.p,{children:"A boolean indicating whether to print the state after the node is processed. Useful for debugging."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"print_state: true\n"})}),"\n",(0,i.jsx)(n.h4,{id:"print_prompt",children:(0,i.jsx)(n.code,{children:"print_prompt"})}),"\n",(0,i.jsx)(n.p,{children:"A boolean indicating whether to print the prompt sent to the AI model. Useful for debugging."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"print_prompt: true\n"})}),"\n",(0,i.jsx)(n.h4,{id:"limit",children:(0,i.jsx)(n.code,{children:"limit"})}),"\n",(0,i.jsxs)(n.p,{children:["An integer specifying the maximum number of times the node can be executed in a loop. Used in conjunction with ",(0,i.jsx)(n.code,{children:"limit_counter_field"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"limit: 5\n"})}),"\n",(0,i.jsx)(n.h4,{id:"limit_counter_field",children:(0,i.jsx)(n.code,{children:"limit_counter_field"})}),"\n",(0,i.jsx)(n.p,{children:"The variable name for the loop counter. The counter is incremented each time the node is executed and reset when it reaches the limit."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"limit_counter_field: iteration_count\n"})}),"\n",(0,i.jsx)(n.h2,{id:"flow-configuration",children:"Flow Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"basic-connections",children:"Basic Connections"}),"\n",(0,i.jsx)(n.p,{children:"The simplest form of connection is a direct link from one node to another:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"flow:\n  - from: node1\n    to: node2\n"})}),"\n",(0,i.jsx)(n.h3,{id:"special-nodes",children:"Special Nodes"}),"\n",(0,i.jsx)(n.p,{children:"There are two special nodes in the flow:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"START"}),": The entry point of the flow"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"END"}),": The exit point of the flow"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"flow:\n  - from: START\n    to: first_node\n  - from: last_node\n    to: END\n"})}),"\n",(0,i.jsx)(n.h3,{id:"conditional-edges",children:"Conditional Edges"}),"\n",(0,i.jsx)(n.p,{children:"For branching paths, you can use conditional edges with lambda functions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"flow:\n  - from: check_condition\n    edges:\n      - to: path_a\n        condition: \"lambda x: x['condition'] == True\"\n      - to: path_b\n        condition: \"lambda x: x['condition'] == False\"\n"})}),"\n",(0,i.jsx)(n.p,{children:"The lambda function takes the state dictionary as input and returns a boolean indicating whether the edge should be followed."}),"\n",(0,i.jsx)(n.h2,{id:"variable-interpolation",children:"Variable Interpolation"}),"\n",(0,i.jsx)(n.p,{children:"You can include variables from the state in prompts using curly braces:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"prompt: |\n  Generate a response to the user's query: {search_query}\n  \n  Previous results:\n  {previous_results}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,i.jsx)(n.p,{children:"Here's a complete example of an agent that searches the web and summarizes the results:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'description: Web search and summarization agent\nnodes:\n  - name: get_query\n    type: input\n    prompt: |\n      What would you like to search for?\n    output_model:\n      search_query: str\n\n  - name: search_web\n    type: llm\n    system: |\n      You are a research assistant that performs high-quality web searches.\n    prompt: |\n      Please perform a web search to gather useful information on the following topic:\n      \n      Topic: "{search_query}"\n      \n      Make sure to include credible sources.\n    output_model:\n      search_results: list\n    tools: true\n    tools_selection:\n      - web_search\n    tools_auto_approval: false\n\n  - name: summarize_results\n    type: llm\n    system: |\n      You are a summarization expert.\n    prompt: |\n      Summarize the following search results:\n      \n      {search_results}\n      \n      Provide a concise summary that covers the main points.\n    output_model:\n      summary: str\n    user_message:\n      - summary\n\n  - name: ask_for_more\n    type: input\n    prompt: |\n      Would you like to search for something else?\n    output_model:\n      continue_search: str\n    options:\n      - "Yes"\n      - "No"\n\nflow:\n  - from: START\n    to: get_query\n  - from: get_query\n    to: search_web\n  - from: search_web\n    to: summarize_results\n  - from: summarize_results\n    to: ask_for_more\n  - from: ask_for_more\n    edges:\n      - to: get_query\n        condition: "lambda x: x[\'continue_search\'] == \'Yes\'"\n      - to: END\n        condition: "lambda x: x[\'continue_search\'] == \'No\'"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use descriptive names"}),": Give nodes clear, descriptive names that indicate their purpose"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Keep prompts focused"}),": Each node should have a specific purpose and a focused prompt"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use system messages"}),": Set appropriate system messages for LLM nodes to guide the AI's behavior"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Validate user input"}),": Use input nodes with options to restrict user input to valid choices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Handle errors"}),": Use conditional edges to handle potential errors in the flow"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use tools judiciously"}),": Only enable tools that are necessary for the node's function"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Document your YAML"}),": Add comments to explain complex parts of the configuration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test thoroughly"}),": Test your agent with various inputs to ensure it behaves as expected"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"validation",children:"Validation"}),"\n",(0,i.jsxs)(n.p,{children:["Astonish validates YAML configurations against a schema to ensure they are well-formed. You can use the ",(0,i.jsx)(n.code,{children:"validate_yaml_with_schema"})," tool to validate your configurations:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"- name: validate_config\n  type: llm\n  prompt: |\n    Validate the following YAML configuration against the schema:\n    \n    Configuration:\n    {yaml_content}\n    \n    Schema:\n    {yaml_schema}\n  output_model:\n    validation_result: str\n  tools: true\n  tools_selection:\n    - validate_yaml_with_schema\n"})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"To learn more about YAML configuration in Astonish, check out:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/concepts/agentic-flows",children:"Agentic Flows"})," for an overview of how nodes are connected"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/concepts/nodes",children:"Nodes"})," for details on node types and configuration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/concepts/tools",children:"Tools"})," for information on using tools in your agents"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/tutorials/creating-agents",children:"Tutorials"})," for examples of creating agents"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>r});var s=o(6540);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);