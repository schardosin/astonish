"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1536],{5260:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"api/tools/internal-tools","title":"Internal Tools","description":"Astonish comes with several built-in tools that are always available to agents. These tools allow agents to interact with the file system and execute shell commands.","source":"@site/docs/api/tools/internal-tools.md","sourceDirName":"api/tools","slug":"/api/tools/internal-tools","permalink":"/astonish/docs/api/tools/internal-tools","draft":false,"unlisted":false,"editUrl":"https://github.com/schardosin/astonish/tree/main/docs/docs/api/tools/internal-tools.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Agent Runner","permalink":"/astonish/docs/api/core/agent-runner"},"next":{"title":"MCP Tools","permalink":"/astonish/docs/api/tools/mcp-tools"}}');var i=l(4848),s=l(8453);const a={sidebar_position:1},o="Internal Tools",r={},d=[{value:"Overview",id:"overview",level:2},{value:"Available Tools",id:"available-tools",level:2},{value:"read_file",id:"read_file",level:3},{value:"Input Schema",id:"input-schema",level:4},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:4},{value:"write_file",id:"write_file",level:3},{value:"Input Schema",id:"input-schema-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-1",level:4},{value:"shell_command",id:"shell_command",level:3},{value:"Input Schema",id:"input-schema-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Example",id:"example-2",level:4},{value:"validate_yaml_with_schema",id:"validate_yaml_with_schema",level:3},{value:"Input Schema",id:"input-schema-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Example",id:"example-3",level:4},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Tool Registration",id:"tool-registration",level:3},{value:"Tool Export",id:"tool-export",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Related Modules",id:"related-modules",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"internal-tools",children:"Internal Tools"})}),"\n",(0,i.jsx)(n.p,{children:"Astonish comes with several built-in tools that are always available to agents. These tools allow agents to interact with the file system and execute shell commands."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The internal tools are defined in the ",(0,i.jsx)(n.code,{children:"internal_tools.py"})," module and are automatically available to all agents. They provide basic functionality for reading and writing files, executing shell commands, and validating YAML content."]}),"\n",(0,i.jsx)(n.h2,{id:"available-tools",children:"Available Tools"}),"\n",(0,i.jsx)(n.h3,{id:"read_file",children:"read_file"}),"\n",(0,i.jsx)(n.p,{children:"Reads the contents of a file at the specified path."}),"\n",(0,i.jsx)(n.h4,{id:"input-schema",children:"Input Schema"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class ReadFileInput(BaseModel):\n    file_path: str = Field(..., description="The path to the file to be read.")\n'})}),"\n",(0,i.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str"}),": The contents of the file as a string."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"- name: read_document\n  type: llm\n  prompt: |\n    Read the contents of the file at path: {file_path}\n  output_model:\n    file_content: str\n  tools: true\n  tools_selection:\n    - read_file\n"})}),"\n",(0,i.jsx)(n.h3,{id:"write_file",children:"write_file"}),"\n",(0,i.jsx)(n.p,{children:"Writes content to a file at the specified path."}),"\n",(0,i.jsx)(n.h4,{id:"input-schema-1",children:"Input Schema"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class WriteFileInput(BaseModel):\n    file_path: str = Field(..., description="The path to the file where content will be written.")\n    content: str = Field(..., description="The content to write to the file.")\n'})}),"\n",(0,i.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str"}),": A confirmation message indicating that the content was successfully written."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"- name: save_summary\n  type: llm\n  prompt: |\n    Save the following summary to a file:\n    {summary}\n    \n    File path: {output_path}\n  output_model:\n    save_result: str\n  tools: true\n  tools_selection:\n    - write_file\n"})}),"\n",(0,i.jsx)(n.h3,{id:"shell_command",children:"shell_command"}),"\n",(0,i.jsx)(n.p,{children:"Executes a shell command and returns the output."}),"\n",(0,i.jsx)(n.h4,{id:"input-schema-2",children:"Input Schema"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class ExecuteCommandInput(BaseModel):\n    command: str = Field(..., description="The shell command to execute.")\n'})}),"\n",(0,i.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Dict[str, str]"}),": A dictionary containing the stdout and stderr output of the command."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"- name: list_files\n  type: llm\n  prompt: |\n    List the files in the directory: {directory_path}\n  output_model:\n    file_list: str\n  tools: true\n  tools_selection:\n    - shell_command\n"})}),"\n",(0,i.jsx)(n.h3,{id:"validate_yaml_with_schema",children:"validate_yaml_with_schema"}),"\n",(0,i.jsx)(n.p,{children:"Validates YAML content against a schema."}),"\n",(0,i.jsx)(n.h4,{id:"input-schema-3",children:"Input Schema"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class ValidateGenericYAMLInput(BaseModel):\n    schema_yaml: str = Field(..., description="YAML schema definition (as a string).")\n    content_yaml: str = Field(..., description="YAML content to validate (as a string).")\n'})}),"\n",(0,i.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Dict[str, Union[str, List[str]]]"}),": A dictionary containing either a success message or a list of validation errors."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"- name: validate_config\n  type: llm\n  prompt: |\n    Validate the following YAML configuration against the schema:\n    \n    Configuration:\n    {yaml_content}\n    \n    Schema:\n    {yaml_schema}\n  output_model:\n    validation_result: str\n  tools: true\n  tools_selection:\n    - validate_yaml_with_schema\n"})}),"\n",(0,i.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,i.jsx)(n.h3,{id:"tool-registration",children:"Tool Registration"}),"\n",(0,i.jsxs)(n.p,{children:["The internal tools are registered using the ",(0,i.jsx)(n.code,{children:"@tool"})," decorator from LangChain:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@tool("read_file", args_schema=ReadFileInput)\ndef read_file(file_path: str) -> str:\n    """\n    Read the contents of a file. Requires \'file_path\'\n    """\n    with open(file_path, \'r\') as file:\n        return file.read()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"tool-export",children:"Tool Export"}),"\n",(0,i.jsx)(n.p,{children:"The tools are exported as a list that can be used by the agent runner:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Export the list of tools\ntools = [read_file, write_file, shell_command, validate_yaml_with_schema]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,i.jsx)(n.p,{children:"The internal tools have access to the file system and can execute shell commands, which could potentially be used maliciously. To mitigate this risk:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"shell_command"})," tool has a timeout of 120 seconds to prevent long-running commands"]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"shell_command"})," tool captures output to prevent interactive commands"]}),"\n",(0,i.jsx)(n.li,{children:"Tool usage requires user approval by default, allowing users to review and deny potentially harmful operations"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/api/tools/mcp-tools",children:"MCP Tools"}),": External tools provided by MCP servers"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>a,x:()=>o});var t=l(6540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);