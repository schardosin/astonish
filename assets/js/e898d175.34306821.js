"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4162],{3069:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"tutorials/creating-agents","title":"Creating Agents","description":"This tutorial will guide you through the process of creating custom agents in Astonish, from basic concepts to advanced techniques.","source":"@site/docs/tutorials/creating-agents.md","sourceDirName":"tutorials","slug":"/tutorials/creating-agents","permalink":"/astonish/docs/tutorials/creating-agents","draft":false,"unlisted":false,"editUrl":"https://github.com/schardosin/astonish/tree/main/docs/docs/tutorials/creating-agents.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"YAML Configuration","permalink":"/astonish/docs/concepts/yaml-configuration"},"next":{"title":"Using Tools","permalink":"/astonish/docs/tutorials/using-tools"}}');var r=t(4848),i=t(8453);const o={sidebar_position:1},a="Creating Agents",c={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Using the Agent Creator",id:"using-the-agent-creator",level:2},{value:"Creating an Agent Manually",id:"creating-an-agent-manually",level:2},{value:"Basic Agent Structure",id:"basic-agent-structure",level:2},{value:"Adding User Input",id:"adding-user-input",level:2},{value:"Using AI Processing",id:"using-ai-processing",level:2},{value:"Using Tools",id:"using-tools",level:2},{value:"Creating Loops",id:"creating-loops",level:2},{value:"Adding Branching Logic",id:"adding-branching-logic",level:2},{value:"Advanced Example: Web Research Agent",id:"advanced-example-web-research-agent",level:2},{value:"Testing Your Agent",id:"testing-your-agent",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"creating-agents",children:"Creating Agents"})}),"\n",(0,r.jsx)(n.p,{children:"This tutorial will guide you through the process of creating custom agents in Astonish, from basic concepts to advanced techniques."}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"Before you begin, make sure you have:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/getting-started/installation",children:"Installed Astonish"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/getting-started/configuration",children:"Configured an AI provider"})}),"\n",(0,r.jsxs)(n.li,{children:["Basic understanding of ",(0,r.jsx)(n.a,{href:"/docs/concepts/agentic-flows",children:"Agentic Flows"})," and ",(0,r.jsx)(n.a,{href:"/docs/concepts/yaml-configuration",children:"YAML Configuration"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"using-the-agent-creator",children:"Using the Agent Creator"}),"\n",(0,r.jsx)(n.p,{children:"The easiest way to create a new agent is to use the built-in agent creator:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"astonish agents run agents_creator\n"})}),"\n",(0,r.jsx)(n.p,{children:"This will start an interactive process that guides you through creating a new agent:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"You describe what you want the agent to do"}),"\n",(0,r.jsx)(n.li,{children:"The agent creator generates a YAML configuration"}),"\n",(0,r.jsx)(n.li,{children:"You review and refine the configuration"}),"\n",(0,r.jsx)(n.li,{children:"The agent creator saves the final configuration to your config directory"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"creating-an-agent-manually",children:"Creating an Agent Manually"}),"\n",(0,r.jsx)(n.p,{children:"If you prefer to create an agent manually, you can create a YAML file in your config directory:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Create the agents directory if it doesn't exist\nmkdir -p ~/.config/astonish/agents\n\n# Create a new agent file\ntouch ~/.config/astonish/agents/my_agent.yaml\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then edit the file with your favorite text editor:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Open the file in your default editor\nastonish agents edit my_agent\n"})}),"\n",(0,r.jsx)(n.h2,{id:"basic-agent-structure",children:"Basic Agent Structure"}),"\n",(0,r.jsx)(n.p,{children:"A basic agent consists of:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"A description"}),"\n",(0,r.jsx)(n.li,{children:"One or more nodes"}),"\n",(0,r.jsx)(n.li,{children:"A flow that connects the nodes"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here's a simple example of a greeting agent:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"description: A simple greeting agent\nnodes:\n  - name: get_name\n    type: input\n    prompt: |\n      What is your name?\n    output_model:\n      user_name: str\n\n  - name: generate_greeting\n    type: llm\n    system: |\n      You are a friendly assistant.\n    prompt: |\n      Generate a warm greeting for a user named {user_name}.\n    output_model:\n      greeting: str\n    user_message:\n      - greeting\n\nflow:\n  - from: START\n    to: get_name\n  - from: get_name\n    to: generate_greeting\n  - from: generate_greeting\n    to: END\n"})}),"\n",(0,r.jsx)(n.h2,{id:"adding-user-input",children:"Adding User Input"}),"\n",(0,r.jsx)(n.p,{children:"Input nodes allow your agent to collect information from the user:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'- name: get_preference\n  type: input\n  prompt: |\n    Do you prefer a formal or casual greeting?\n  output_model:\n    greeting_style: str\n  options:\n    - "Formal"\n    - "Casual"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"options"})," field provides a list of choices for the user, making it easier to handle the input in subsequent nodes."]}),"\n",(0,r.jsx)(n.h2,{id:"using-ai-processing",children:"Using AI Processing"}),"\n",(0,r.jsx)(n.p,{children:"LLM nodes use AI models to process information and generate responses:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"- name: generate_greeting\n  type: llm\n  system: |\n    You are a friendly assistant that generates greetings.\n  prompt: |\n    Generate a {greeting_style} greeting for a user named {user_name}.\n  output_model:\n    greeting: str\n  user_message:\n    - greeting\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"system"})," field sets the context for the AI model, while the ",(0,r.jsx)(n.code,{children:"prompt"})," field provides specific instructions. The ",(0,r.jsx)(n.code,{children:"user_message"})," field specifies which variables to display to the user after processing."]}),"\n",(0,r.jsx)(n.h2,{id:"using-tools",children:"Using Tools"}),"\n",(0,r.jsxs)(n.p,{children:["Tools allow your agent to interact with external systems. Here's an example of using the ",(0,r.jsx)(n.code,{children:"read_file"})," tool:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"- name: read_file_content\n  type: llm\n  system: |\n    You are a file reading assistant.\n  prompt: |\n    Read the contents of the file at path: {file_path}\n  output_model:\n    file_content: str\n  tools: true\n  tools_selection:\n    - read_file\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"tools"})," field enables tool usage, and the ",(0,r.jsx)(n.code,{children:"tools_selection"})," field specifies which tools the node can use."]}),"\n",(0,r.jsx)(n.h2,{id:"creating-loops",children:"Creating Loops"}),"\n",(0,r.jsx)(n.p,{children:"You can create loops in your agent using conditional edges and counter variables:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"- name: process_item\n  type: llm\n  prompt: |\n    Process item {current_index} from the list: {items}\n    Current index: {current_index}\n    Total items: {total_items}\n  output_model:\n    processed_item: str\n    current_index: int\n  limit: 10\n  limit_counter_field: loop_counter\n\n- name: increment_index\n  type: llm\n  prompt: |\n    Increment the current index: {current_index}\n  output_model:\n    current_index: int\n\nflow:\n  - from: previous_node\n    to: process_item\n  - from: process_item\n    to: increment_index\n  - from: increment_index\n    edges:\n      - to: process_item\n        condition: \"lambda x: x['current_index'] < x['total_items']\"\n      - to: next_node\n        condition: \"lambda x: x['current_index'] >= x['total_items']\"\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"limit"})," and ",(0,r.jsx)(n.code,{children:"limit_counter_field"})," fields prevent infinite loops by limiting the number of times the node can be executed."]}),"\n",(0,r.jsx)(n.h2,{id:"adding-branching-logic",children:"Adding Branching Logic"}),"\n",(0,r.jsx)(n.p,{children:"You can create branching paths in your agent using conditional edges:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"- name: check_condition\n  type: llm\n  prompt: |\n    Check if the user's query requires web search.\n    Query: {user_query}\n  output_model:\n    needs_search: bool\n\nflow:\n  - from: previous_node\n    to: check_condition\n  - from: check_condition\n    edges:\n      - to: search_web\n        condition: \"lambda x: x['needs_search'] == True\"\n      - to: generate_response\n        condition: \"lambda x: x['needs_search'] == False\"\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"edges"})," field specifies multiple possible destinations based on conditions."]}),"\n",(0,r.jsx)(n.h2,{id:"advanced-example-web-research-agent",children:"Advanced Example: Web Research Agent"}),"\n",(0,r.jsx)(n.p,{children:"Here's a more advanced example of an agent that performs web research:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"description: Web research agent that searches for information and summarizes the results\nnodes:\n  - name: get_research_topic\n    type: input\n    prompt: |\n      What topic would you like to research?\n    output_model:\n      research_topic: str\n\n  - name: search_web\n    type: llm\n    system: |\n      You are a research assistant that performs high-quality web searches.\n    prompt: |\n      Search the web for information about: {research_topic}\n      \n      Return a list of search results with titles and snippets.\n    output_model:\n      search_results: list\n    tools: true\n    tools_selection:\n      - web_search\n    tools_auto_approval: false\n\n  - name: extract_key_points\n    type: llm\n    system: |\n      You are an information extraction expert.\n    prompt: |\n      Extract the key points from these search results:\n      \n      {search_results}\n      \n      Identify the most important facts and insights.\n    output_model:\n      key_points: list\n\n  - name: generate_summary\n    type: llm\n    system: |\n      You are a summarization expert.\n    prompt: |\n      Create a comprehensive summary about {research_topic} based on these key points:\n      \n      {key_points}\n      \n      The summary should be well-structured and informative.\n    output_model:\n      summary: str\n    user_message:\n      - summary\n\n  - name: ask_for_more\n    type: input\n    prompt: |\n      Would you like to research another topic?\n    output_model:\n      continue_research: str\n    options:\n      - \"Yes\"\n      - \"No\"\n\nflow:\n  - from: START\n    to: get_research_topic\n  - from: get_research_topic\n    to: search_web\n  - from: search_web\n    to: extract_key_points\n  - from: extract_key_points\n    to: generate_summary\n  - from: generate_summary\n    to: ask_for_more\n  - from: ask_for_more\n    edges:\n      - to: get_research_topic\n        condition: \"lambda x: x['continue_research'] == 'Yes'\"\n      - to: END\n        condition: \"lambda x: x['continue_research'] == 'No'\"\n"})}),"\n",(0,r.jsx)(n.p,{children:"This agent:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Gets a research topic from the user"}),"\n",(0,r.jsx)(n.li,{children:"Searches the web for information"}),"\n",(0,r.jsx)(n.li,{children:"Extracts key points from the search results"}),"\n",(0,r.jsx)(n.li,{children:"Generates a comprehensive summary"}),"\n",(0,r.jsx)(n.li,{children:"Asks if the user wants to research another topic"}),"\n",(0,r.jsx)(n.li,{children:"Either starts over or ends the flow"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"testing-your-agent",children:"Testing Your Agent"}),"\n",(0,r.jsx)(n.p,{children:"Once you've created your agent, you can test it by running:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"astonish agents run my_agent\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can also visualize the flow to ensure it's structured correctly:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"astonish agents flow my_agent\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Start simple"}),": Begin with a basic agent and add complexity gradually"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test frequently"}),": Test your agent after each significant change"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use descriptive names"}),": Give nodes clear, descriptive names"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Keep prompts focused"}),": Each node should have a specific purpose"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Handle errors"}),": Use conditional edges to handle potential errors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Document your agent"}),": Add comments to explain complex parts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use the agent creator"}),": Let the agent creator generate the initial YAML and then refine it"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"Now that you know how to create agents, you can:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Learn about ",(0,r.jsx)(n.a,{href:"/docs/tutorials/using-tools",children:"Using Tools"})," to extend your agents' capabilities"]}),"\n",(0,r.jsxs)(n.li,{children:["Explore ",(0,r.jsx)(n.a,{href:"/docs/tutorials/advanced-flows",children:"Advanced Flows"})," for more complex agent patterns"]}),"\n",(0,r.jsxs)(n.li,{children:["Check out the ",(0,r.jsx)(n.a,{href:"/docs/api/core/agent-runner",children:"API Reference"})," for more details on Astonish's internals"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);