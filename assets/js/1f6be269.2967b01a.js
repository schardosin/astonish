"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1924],{6278:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api/tools/mcp-tools","title":"MCP Tools","description":"MCP (Model Context Protocol) tools extend the capabilities of Astonish by connecting to external services. This page explains how to use and create MCP tools.","source":"@site/docs/api/tools/mcp-tools.md","sourceDirName":"api/tools","slug":"/api/tools/mcp-tools","permalink":"/astonish/docs/api/tools/mcp-tools","draft":false,"unlisted":false,"editUrl":"https://github.com/schardosin/astonish/tree/main/docs/docs/api/tools/mcp-tools.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Internal Tools","permalink":"/astonish/docs/api/tools/internal-tools"}}');var t=r(4848),o=r(8453);const i={sidebar_position:2},a="MCP Tools",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Using MCP Tools",id:"using-mcp-tools",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Example Configuration",id:"example-configuration",level:3},{value:"Using MCP Tools in Agents",id:"using-mcp-tools-in-agents",level:3},{value:"Creating MCP Servers",id:"creating-mcp-servers",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Installation",id:"installation",level:3},{value:"Basic Server Structure",id:"basic-server-structure",level:3},{value:"Building and Running",id:"building-and-running",level:3},{value:"Example: Weather MCP Server",id:"example-weather-mcp-server",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"MCP Server Not Connected",id:"mcp-server-not-connected",level:3},{value:"Tool Not Found",id:"tool-not-found",level:3},{value:"Tool Execution Failed",id:"tool-execution-failed",level:3},{value:"Related Modules",id:"related-modules",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"mcp-tools",children:"MCP Tools"})}),"\n",(0,t.jsx)(n.p,{children:"MCP (Model Context Protocol) tools extend the capabilities of Astonish by connecting to external services. This page explains how to use and create MCP tools."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"MCP tools are provided by external servers that implement the Model Context Protocol. These servers can provide additional functionality beyond the built-in tools, such as web search, API access, or specialized processing."}),"\n",(0,t.jsx)(n.h2,{id:"using-mcp-tools",children:"Using MCP Tools"}),"\n",(0,t.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.p,{children:"To use MCP tools, you need to configure the MCP server in the MCP configuration file:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"astonish tools edit\n"})}),"\n",(0,t.jsx)(n.p,{children:"This will open the MCP configuration file in your default editor. The configuration is a JSON file with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "mcpServers": {\n    "server-name": {\n      "command": "command-to-run-server",\n      "args": ["arg1", "arg2"],\n      "env": {\n        "ENV_VAR1": "value1",\n        "ENV_VAR2": "value2"\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"example-configuration",children:"Example Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Here's an example configuration for a weather MCP server:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "mcpServers": {\n    "weather": {\n      "command": "node",\n      "args": ["/path/to/weather-server/index.js"],\n      "env": {\n        "OPENWEATHER_API_KEY": "your-api-key"\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"using-mcp-tools-in-agents",children:"Using MCP Tools in Agents"}),"\n",(0,t.jsx)(n.p,{children:"Once you've configured an MCP server, you can use its tools in your agents:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- name: search_web\n  type: llm\n  prompt: |\n    Search the web for information about: {search_query}\n  output_model:\n    search_results: str\n  tools: true\n  tools_selection:\n    - tavily_search  # An MCP tool for web search\n"})}),"\n",(0,t.jsx)(n.h2,{id:"creating-mcp-servers",children:"Creating MCP Servers"}),"\n",(0,t.jsx)(n.p,{children:"You can create your own MCP servers to provide custom tools for Astonish. MCP servers are implemented using the Model Context Protocol SDK."}),"\n",(0,t.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Node.js (version 14 or higher)"}),"\n",(0,t.jsx)(n.li,{children:"Basic knowledge of JavaScript/TypeScript"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install @modelcontextprotocol/sdk\n"})}),"\n",(0,t.jsx)(n.h3,{id:"basic-server-structure",children:"Basic Server Structure"}),"\n",(0,t.jsx)(n.p,{children:"Here's a basic structure for an MCP server:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"#!/usr/bin/env node\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport {\n  CallToolRequestSchema,\n  ListToolsRequestSchema,\n} from '@modelcontextprotocol/sdk/types.js';\n\nclass MyMCPServer {\n  private server: Server;\n\n  constructor() {\n    this.server = new Server(\n      {\n        name: 'my-mcp-server',\n        version: '0.1.0',\n      },\n      {\n        capabilities: {\n          tools: {},\n        },\n      }\n    );\n\n    this.setupToolHandlers();\n    \n    // Error handling\n    this.server.onerror = (error) => console.error('[MCP Error]', error);\n    process.on('SIGINT', async () => {\n      await this.server.close();\n      process.exit(0);\n    });\n  }\n\n  private setupToolHandlers() {\n    this.server.setRequestHandler(ListToolsRequestSchema, async () => ({\n      tools: [\n        {\n          name: 'my_tool',\n          description: 'A custom tool that does something useful',\n          inputSchema: {\n            type: 'object',\n            properties: {\n              param1: {\n                type: 'string',\n                description: 'Parameter 1',\n              },\n              param2: {\n                type: 'number',\n                description: 'Parameter 2',\n              },\n            },\n            required: ['param1'],\n          },\n        },\n      ],\n    }));\n\n    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {\n      if (request.params.name !== 'my_tool') {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Unknown tool: ${request.params.name}`,\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const param1 = request.params.arguments.param1;\n        const param2 = request.params.arguments.param2 || 0;\n\n        // Implement your tool logic here\n        const result = `Processed ${param1} with value ${param2}`;\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: result,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Error: ${error.message}`,\n            },\n          ],\n          isError: true,\n        };\n      }\n    });\n  }\n\n  async run() {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.error('MCP server running on stdio');\n  }\n}\n\nconst server = new MyMCPServer();\nserver.run().catch(console.error);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"building-and-running",children:"Building and Running"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Save the code to a file (e.g., ",(0,t.jsx)(n.code,{children:"my-mcp-server.ts"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"Compile it with TypeScript:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"tsc my-mcp-server.ts\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Make the output file executable:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"chmod +x my-mcp-server.js\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsx)(n.li,{children:"Configure it in the MCP configuration file:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "mcpServers": {\n    "my-server": {\n      "command": "node",\n      "args": ["/path/to/my-mcp-server.js"],\n      "env": {\n        "API_KEY": "your-api-key"\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"example-weather-mcp-server",children:"Example: Weather MCP Server"}),"\n",(0,t.jsx)(n.p,{children:"Here's a more complete example of an MCP server that provides weather information:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"#!/usr/bin/env node\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport {\n  CallToolRequestSchema,\n  ErrorCode,\n  ListToolsRequestSchema,\n  McpError,\n} from '@modelcontextprotocol/sdk/types.js';\nimport axios from 'axios';\n\nconst API_KEY = process.env.OPENWEATHER_API_KEY;\nif (!API_KEY) {\n  throw new Error('OPENWEATHER_API_KEY environment variable is required');\n}\n\nclass WeatherServer {\n  private server: Server;\n  private axiosInstance;\n\n  constructor() {\n    this.server = new Server(\n      {\n        name: 'weather-server',\n        version: '0.1.0',\n      },\n      {\n        capabilities: {\n          tools: {},\n        },\n      }\n    );\n\n    this.axiosInstance = axios.create({\n      baseURL: 'http://api.openweathermap.org/data/2.5',\n      params: {\n        appid: API_KEY,\n        units: 'metric',\n      },\n    });\n\n    this.setupToolHandlers();\n    \n    // Error handling\n    this.server.onerror = (error) => console.error('[MCP Error]', error);\n    process.on('SIGINT', async () => {\n      await this.server.close();\n      process.exit(0);\n    });\n  }\n\n  private setupToolHandlers() {\n    this.server.setRequestHandler(ListToolsRequestSchema, async () => ({\n      tools: [\n        {\n          name: 'get_weather',\n          description: 'Get current weather for a city',\n          inputSchema: {\n            type: 'object',\n            properties: {\n              city: {\n                type: 'string',\n                description: 'City name',\n              },\n            },\n            required: ['city'],\n          },\n        },\n        {\n          name: 'get_forecast',\n          description: 'Get weather forecast for a city',\n          inputSchema: {\n            type: 'object',\n            properties: {\n              city: {\n                type: 'string',\n                description: 'City name',\n              },\n              days: {\n                type: 'number',\n                description: 'Number of days (1-5)',\n                minimum: 1,\n                maximum: 5,\n              },\n            },\n            required: ['city'],\n          },\n        },\n      ],\n    }));\n\n    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {\n      try {\n        if (request.params.name === 'get_weather') {\n          const city = request.params.arguments.city;\n          \n          const response = await this.axiosInstance.get('weather', {\n            params: { q: city },\n          });\n\n          return {\n            content: [\n              {\n                type: 'text',\n                text: JSON.stringify({\n                  temperature: response.data.main.temp,\n                  conditions: response.data.weather[0].description,\n                  humidity: response.data.main.humidity,\n                  wind_speed: response.data.wind.speed,\n                }, null, 2),\n              },\n            ],\n          };\n        } else if (request.params.name === 'get_forecast') {\n          const city = request.params.arguments.city;\n          const days = Math.min(request.params.arguments.days || 3, 5);\n          \n          const response = await this.axiosInstance.get('forecast', {\n            params: {\n              q: city,\n              cnt: days * 8,\n            },\n          });\n\n          return {\n            content: [\n              {\n                type: 'text',\n                text: JSON.stringify(response.data.list, null, 2),\n              },\n            ],\n          };\n        } else {\n          throw new McpError(\n            ErrorCode.MethodNotFound,\n            `Unknown tool: ${request.params.name}`\n          );\n        }\n      } catch (error) {\n        if (axios.isAxiosError(error)) {\n          return {\n            content: [\n              {\n                type: 'text',\n                text: `Weather API error: ${\n                  error.response?.data.message ?? error.message\n                }`,\n              },\n            ],\n            isError: true,\n          };\n        }\n        throw error;\n      }\n    });\n  }\n\n  async run() {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.error('Weather MCP server running on stdio');\n  }\n}\n\nconst server = new WeatherServer();\nserver.run().catch(console.error);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Error Handling"}),": Implement robust error handling in your MCP server"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Input Validation"}),": Validate input parameters to prevent errors"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security"}),": Be careful with API keys and sensitive data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"}),": Provide clear descriptions for your tools and parameters"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance"}),": Optimize your server for performance, especially for frequently used tools"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Testing"}),": Test your MCP server thoroughly before using it in production"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Versioning"}),": Use semantic versioning for your MCP server"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"mcp-server-not-connected",children:"MCP Server Not Connected"}),"\n",(0,t.jsx)(n.p,{children:"If your MCP server is not connecting:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Check that the server is properly configured in the MCP configuration file"}),"\n",(0,t.jsx)(n.li,{children:"Verify that the server command and arguments are correct"}),"\n",(0,t.jsx)(n.li,{children:"Ensure any required environment variables are set"}),"\n",(0,t.jsx)(n.li,{children:"Check the server logs for error messages"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"tool-not-found",children:"Tool Not Found"}),"\n",(0,t.jsx)(n.p,{children:"If a tool is not found:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Check that the tool is properly registered in the MCP server"}),"\n",(0,t.jsx)(n.li,{children:"Verify that the tool name is spelled correctly in the agent configuration"}),"\n",(0,t.jsx)(n.li,{children:"Check that the MCP server is running and connected"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"tool-execution-failed",children:"Tool Execution Failed"}),"\n",(0,t.jsx)(n.p,{children:"If a tool execution fails:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Check the error message for specific details"}),"\n",(0,t.jsx)(n.li,{children:"Verify that the tool's input parameters are correct"}),"\n",(0,t.jsx)(n.li,{children:"Check that any external services the tool depends on are available"}),"\n",(0,t.jsx)(n.li,{children:"Check the server logs for error messages"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-modules",children:"Related Modules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/api/tools/internal-tools",children:"Internal Tools"}),": Built-in tools provided by Astonish"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var s=r(6540);const t={},o=s.createContext(t);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);